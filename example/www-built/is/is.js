define(["module","require"],function(e,t){var n={};n.features=e.config()||{};for(var r in n.features)if(n.features[r]!==!0&&n.features[r]!==!1)throw"Feature "+r+" must be true or false in config.";return n.used={},n.deps={},n.lookup=function(e,r){if(n.features[e]!==undefined){r(n.features[e]);return}t([e],function(t){if(t!==!0&&t!==!1)throw"Feature module "+e+" must return true or false.";n.features[e]=t,r(t)})},n.deconstruct=function(e){if(e.substr(0,1)=="[")return{feature:e.substr(1,e.length-2),type:"check"};if(e.substr(e.length-1,1)=="*")return{feature:e.substr(0,e.length-1),type:"load_deps"};var t=e.substr(0,e.indexOf("?")),n=e.substr(t.length+1,e.length-t.length-1);if(t=="")throw"Not a valid is call: is!"+e;return t.substr(0,1)=="~"?{feature:t.substr(1,e.length-1),type:"load_if_not",moduleId:n}:{feature:t,type:"load_if",moduleId:n}},n.normalize=function(e,t){var r=n.deconstruct(e);r.feature=t(r.feature),r.moduleId&&(r.moduleId=t(r.moduleId));if(r.type=="check")return"["+r.feature+"]";if(r.type=="load_deps")return r.feature+"*";if(r.type=="load_if_not")return"~"+r.feature+"?"+r.moduleId;if(r.type=="load_if")return r.feature+"?"+r.moduleId},n.set=function(e){if(n.used[e])throw"is: Feature "+e+" has already been used, can't change!";n.features[e]=!0},n.unset=function(e){if(n.used[e])throw"is: Feature "+e+" has already been used, can't change!";n.features[e]=!1},n.load=function(e,t,r,i){console.log(e);var s=n.deconstruct(e);if(s.type=="check"){n.lookup(s.feature,r);return}if(s.type=="load_if"||s.type=="load_if_not"){i.isBuild&&(n.deps[s.feature]=n.deps[s.feature]||[],n.deps[s.feature].push(s.moduleId)),n.lookup(s.feature,function(e){e&&s.type=="load_if"||!e&&s.type=="load_if_not"?t([s.moduleId],r):r(null)});return}if(s.type=="load_deps"){if(!i.isBuild)throw'Can\'t form an "is" dependency load when not in build.';n.deps[s.feature]=n.deps[s.feature]||[],t(n.deps[s.feature],function(){r(null)})}},n})